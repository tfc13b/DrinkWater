{"ast":null,"code":"const AmountOfTimeToCheckInMs = 1000 * 60 * 60;\nconst PollingSpeedInMs = 1000;\n\nclass PersistentTimer {\n  constructor() {\n    //  ensure u have localStorage (can be done better).\n    if (!localStorage) {\n      console.log('localStorage not supported!');\n      return;\n    } //  get the timer element.\n\n\n    this.timerElement = document.querySelector('#timer'); //  get the localStorage variable.\n\n    this.timerValue = localStorage.getItem('timerValue'); //  if it's not set yet, set it.\n\n    if (!this.timerValue) {\n      this.resetTimer();\n    }\n\n    this.updateTimer();\n    setInterval(() => this.triggerEverySecond(), PollingSpeedInMs);\n  }\n\n  triggerEverySecond() {\n    this.updateTimer(); //  compare difference and check if it matches 1 hour (1000ms * 60s * 60m)\n\n    if (this.getTimeDifference() >= AmountOfTimeToCheckInMs) {\n      //  reset timer immediately.\n      this.resetTimer(); // do something..\n    }\n  }\n\n  resetTimer() {\n    this.timerValue = new Date().toString();\n    localStorage.setItem('timerValue', this.timerValue);\n  }\n\n  getTimeDifference() {\n    //  parse string date and get difference between now - old time in milliseconds.\n    return new Date().getTime() - new Date(this.timerValue).getTime();\n  }\n\n  updateTimer() {\n    let calculatedDiffDate = new Date();\n    calculatedDiffDate.setTime(AmountOfTimeToCheckInMs - this.getTimeDifference());\n    this.timerElement.innerHTML = calculatedDiffDate.getMinutes() + 'm ' + calculatedDiffDate.getSeconds() + 's';\n  }\n\n}\n\nnew PersistentTimer();\nconsole.log(PersistentTimer);","map":{"version":3,"sources":["/Users/timcarver/drinkwater/src/setTime.js"],"names":["AmountOfTimeToCheckInMs","PollingSpeedInMs","PersistentTimer","constructor","localStorage","console","log","timerElement","document","querySelector","timerValue","getItem","resetTimer","updateTimer","setInterval","triggerEverySecond","getTimeDifference","Date","toString","setItem","getTime","calculatedDiffDate","setTime","innerHTML","getMinutes","getSeconds"],"mappings":"AAAA,MAAMA,uBAAuB,GAAG,OAAO,EAAP,GAAY,EAA5C;AACA,MAAMC,gBAAgB,GAAU,IAAhC;;AAEA,MAAMC,eAAN,CACA;AACEC,EAAAA,WAAW,GACX;AACE;AACA,QAAI,CAACC,YAAL,EACA;AACEC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACA;AACD,KANH,CAQE;;;AACA,SAAKC,YAAL,GAAoBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAApB,CATF,CAWE;;AACA,SAAKC,UAAL,GAAkBN,YAAY,CAACO,OAAb,CAAqB,YAArB,CAAlB,CAZF,CAcE;;AACA,QAAI,CAAC,KAAKD,UAAV,EACA;AACE,WAAKE,UAAL;AACD;;AAED,SAAKC,WAAL;AACAC,IAAAA,WAAW,CAAC,MAAM,KAAKC,kBAAL,EAAP,EAAkCd,gBAAlC,CAAX;AACD;;AAEDc,EAAAA,kBAAkB,GAClB;AACE,SAAKF,WAAL,GADF,CAGE;;AACA,QAAI,KAAKG,iBAAL,MAA4BhB,uBAAhC,EACA;AACE;AACA,WAAKY,UAAL,GAFF,CAIE;AACD;AACF;;AAEDA,EAAAA,UAAU,GACV;AACE,SAAKF,UAAL,GAAkB,IAAIO,IAAJ,GAAWC,QAAX,EAAlB;AAEAd,IAAAA,YAAY,CAACe,OAAb,CAAqB,YAArB,EAAmC,KAAKT,UAAxC;AACD;;AAEDM,EAAAA,iBAAiB,GACjB;AACE;AACA,WAAO,IAAIC,IAAJ,GAAWG,OAAX,KAAuB,IAAIH,IAAJ,CAAS,KAAKP,UAAd,EAA0BU,OAA1B,EAA9B;AACD;;AAEDP,EAAAA,WAAW,GACX;AACE,QAAIQ,kBAAkB,GAAG,IAAIJ,IAAJ,EAAzB;AACAI,IAAAA,kBAAkB,CAACC,OAAnB,CAA2BtB,uBAAuB,GAAG,KAAKgB,iBAAL,EAArD;AAEA,SAAKT,YAAL,CAAkBgB,SAAlB,GAA8BF,kBAAkB,CAACG,UAAnB,KAAkC,IAAlC,GAAyCH,kBAAkB,CAACI,UAAnB,EAAzC,GAA2E,GAAzG;AACD;;AA3DH;;AA8DA,IAAIvB,eAAJ;AAEAG,OAAO,CAACC,GAAR,CAAYJ,eAAZ","sourcesContent":["const AmountOfTimeToCheckInMs = 1000 * 60 * 60;\nconst PollingSpeedInMs        = 1000;\n\nclass PersistentTimer\n{\n  constructor()\n  {\n    //  ensure u have localStorage (can be done better).\n    if (!localStorage)\n    {\n      console.log('localStorage not supported!');\n      return;\n    }\n\n    //  get the timer element.\n    this.timerElement = document.querySelector('#timer');\n\n    //  get the localStorage variable.\n    this.timerValue = localStorage.getItem('timerValue');\n\n    //  if it's not set yet, set it.\n    if (!this.timerValue)\n    {\n      this.resetTimer();\n    }\n\n    this.updateTimer();\n    setInterval(() => this.triggerEverySecond(), PollingSpeedInMs);\n  }\n\n  triggerEverySecond()\n  {\n    this.updateTimer();\n\n    //  compare difference and check if it matches 1 hour (1000ms * 60s * 60m)\n    if (this.getTimeDifference() >= AmountOfTimeToCheckInMs)\n    {\n      //  reset timer immediately.\n      this.resetTimer();\n\n      // do something..\n    }\n  }\n\n  resetTimer()\n  {\n    this.timerValue = new Date().toString();\n\n    localStorage.setItem('timerValue', this.timerValue);\n  }\n\n  getTimeDifference()\n  {\n    //  parse string date and get difference between now - old time in milliseconds.\n    return new Date().getTime() - new Date(this.timerValue).getTime();\n  }\n\n  updateTimer()\n  {\n    let calculatedDiffDate = new Date()\n    calculatedDiffDate.setTime(AmountOfTimeToCheckInMs - this.getTimeDifference());\n\n    this.timerElement.innerHTML = calculatedDiffDate.getMinutes() + 'm ' + calculatedDiffDate.getSeconds() + 's';\n  }\n}\n\nnew PersistentTimer();\n\nconsole.log(PersistentTimer);"]},"metadata":{},"sourceType":"module"}